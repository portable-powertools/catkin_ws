let g:ycm_log_level = 'debug'
set verbose=1

" g:ale_c_build_dir_names
" if ! empty($ROS_WORKSPACE)
" endif
" fun! g:RosBuildSpace()
    
" endf

fun! g:RosCppBufFun()
    if empty($ROS_WORKSPACE)
        execute "echoerr ROS_WORKSPACE not set!"
    endif
    let l:workspace=$ROS_WORKSPACE
    if ! executable('catkin')
        call xolox#misc#msg#debug('no catkin available')
        return
    endif
    let l:path = expand('%:p:h')
    call xolox#misc#msg#debug('path...'.l:path)
    
    let l:packnamecmd = 'cd '.shellescape(l:path).'; catkin list --workspace '.shellescape(l:workspace).' -u --this 2>/dev/null'
    call xolox#misc#msg#debug('packnamecmd '.l:packnamecmd)
    let l:packagenameL = systemlist(l:packnamecmd)
    if v:shell_error
        call xolox#misc#msg#debug('could not determine ros package from '.l:path)
        return
    endif
    let l:packagename = l:packagenameL[0]
    call xolox#misc#msg#debug('packname...'.l:packagename)

    let l:builddirL = systemlist('catkin locate --workspace '.shellescape(l:workspace).' -b ' . fnameescape(l:packagename))
    if v:shell_error
        call xolox#misc#msg#debug('could not determine ros build dir for package '.l:builddir)
        return
    endif
    let l:builddir = l:builddirL[0]
    call xolox#misc#msg#debug('builddir '.l:builddir)
    let l:cmd = 'catkin locate --workspace '.shellescape(l:workspace).' -b ' . fnameescape(l:packagename)
    call xolox#misc#msg#debug('cmd '.l:cmd)
    
    if ! isdirectory(l:builddir)
        call xolox#misc#msg#debug('catkin build dir '.l:builddir.' does not exist.')
        return
    endif

    let l:compilecommands = l:builddir . '/compile_commands.json'
    if filereadable(l:compilecommands)
        let b:ale_c_build_dir = l:builddir
        call xolox#misc#msg#info('set ALE b:ale_c_build_dir to '.l:builddir)
        let b:ale_linters = ['cppcheck', 'clangcheck', 'clangtidy', 'cquery']
        return
    else
        call xolox#misc#msg#debug('no compile_commands.json found in ' . l:builddir)
    endif
endf

augroup roscpp
    au!
    autocmd FileType c :call g:RosCppBufFun()
    autocmd FileType cpp :call g:RosCppBufFun()
augroup end

